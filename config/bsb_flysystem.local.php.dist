<?php

declare(strict_types=1);

return [
    'bsb_flysystem' => [
        'adapters' => [
            'local_default' => [
                'factory' => BsbFlysystem\Adapter\Factory\LocalAdapterFactory::class,
                'options' => [
                    'location' => './test/_build/files',
                    // 'visibility' => 'service_manager_key',
                    // 'writeFlags' => LOCK_EX,
                    // 'linkHandling' => self::DISALLOW_LINKS,
                    // 'mimeTypeDetector' => 'service_manager_key', // return a \League\MimeTypeDetection\MimeTypeDetector
                    // 'lazyRootCreation' => false,
                ],
            ],
            'ftp_default' => [
                'factory' => BsbFlysystem\Adapter\Factory\FtpAdapterFactory::class,
                'options' => [
                    'connectionOptions' => [
                        'host' => 'localhost',
                        'root' => '/var/www/html',
                        'username' => 'username',
                        'password' => '',
                        //  'port' => 21,
                        //  'ssl' => false,
                        //  'timeout' => 90,
                        //  'utf8' => false,
                        //  'passive' => true,
                        //  'transferMode' => FtpConnectionOptions::FTP_BINARY,
                        //  'systemType' => null,
                        //  'ignorePassiveAddress' => null,
                        //  'enableTimestampsOnUnixListings' => false,
                        //  'recurseManually' => false,
                        //  'useRawListOptions' => null,
                    ],
                    // 'connectionProvider' => 'a-connection-provider',
                    // 'connectivityChecker' => 'a-connectivity-checker',
                    // 'mimeTypeDetector' => 'service_manager_key', // return a \League\MimeTypeDetection\MimeTypeDetector
                    // 'visibilityProvider' => 'service_manager_key',
                ],
            ],
            'sftp_default' => [
                'factory' => BsbFlysystem\Adapter\Factory\SftpAdapterFactory::class,
                'options' => [
                    'connectionProvider' => [
                        'host' => 'xxxxx',
                        'username' => 'xxxxx',
                        // 'password' => 'xxxxx',
                        // 'privateKey' => null,
                        // 'passphrase' => null,
                        // 'port' => 22,
                        // 'useAgent' => false,
                        // 'timeout' => 10,
                        // 'maxTries' => 4,
                        // 'hostFingerprint' => null,
                        // 'connectivityChecker' => 'a-connectivity-checker',
                        // 'preferredAlgorithms' => [],
                    ],
                    'root' => '/var/www/html',
                    // 'mimeTypeDetector' => 'service_manager_key', // return a \League\MimeTypeDetection\MimeTypeDetector
                    // 'visibilityConverter' => 'service_manager_key',
                ],
            ],
            'inmemory_default' => [
                'factory' => BsbFlysystem\Adapter\Factory\InMemoryAdapterFactory::class,
                'options' => [
                    // 'mimeTypeDetector' => 'service_manager_key', // return a \League\MimeTypeDetection\MimeTypeDetector
                    // 'defaultVisibility' => \League\Flysystem\Visibility::PUBLIC,
                ],
            ],
            'azureblobstorage_default' => [
                'factory' => BsbFlysystem\Adapter\Factory\AzureBlobStorageAdapterFactory::class,
                'options' => [
                    'client' => [
                        // @see https://azure.microsoft.com/en-us/documentation/articles/storage-configure-connection-string/
                        'connectionString' => 'DefaultEndpointsProtocol=https;AccountName=xxx;AccountKey=xxx',
                        // @see MicrosoftAzure\Storage\Blob\BlobRestProxy::createBlobService
                        'options' => [],
                    ],
                    'container' => 'xxxxx',
                    // 'prefix' => '',
                    // 'mimeTypeDetector' => 'service_manager_key', // return a \League\MimeTypeDetection\MimeTypeDetector
                    // 'maxResultsForContentsListing' => 5000,
                    // 'visibilityHandling' => AzureBlobStorageAdapter::ON_VISIBILITY_THROW_ERROR,
                    // @see MicrosoftAzure\Storage\Common\Internal\StorageServiceSettings
                    // 'serviceSettings' => [
                        // 'name' => 'xxx',
                        // 'key' => 'xxx',
                        // 'blobEndpointUri' => 'xxx',
                        // 'queueEndpointUri' => 'xxx',
                        // 'tableEndpointUri' => 'xxx',
                        // 'fileEndpointUri' => 'xxx',
                        // 'blobSecondaryEndpointUri' => null,
                        // 'queueSecondaryEndpointUri' => null,
                        // 'tableSecondaryEndpointUri' => null,
                        // 'fileSecondaryEndpointUri' => null,
                        // 'sas' => null,
                    // ]
                ],
            ],
            'googlecloudstorage_default' => [
                'factory' => BsbFlysystem\Adapter\Factory\GoogleCloudStorageAdapterFactory::class,
                'options' => [
                    'bucket' => 'service_manager_key', // return a \Google\Cloud\Storage\Bucket
                    // 'prefix' => '',
                    // 'visibilityHandler' => 'service_manager_key', // return a \League\Flysystem\Visibility
                    // 'defaultVisibility' => Visibility::PRIVATE
                    // 'mimeTypeDetector' => 'service_manager_key', // return a \League\MimeTypeDetection\MimeTypeDetector
                ],
            ],
            'zip_default' => [
                'factory' => BsbFlysystem\Adapter\Factory\ZipArchiveAdapterFactory::class,
                'options' => [
                    'zipArchiveProvider' => [
                        'filename' => './test/_build/files.zip',
                    ],
                    'root' => './test/_build/files',
                    // 'prefix' => '',
                    // 'mimeTypeDetector' => 'service_manager_key', // return a \League\MimeTypeDetection\MimeTypeDetector
                    // 'visibility' => 'service_manager_key',
                ],
            ],
            'dropbox_default' => [
                'factory' => BsbFlysystem\Adapter\Factory\DropboxAdapterFactory::class,
                'options' => [
                    'client' => [ // or 'client' => 'service_manager_key' return a \Spatie\Dropbox\Client,
                        'accessTokenOrAppCredentials' => 'xxxxx',
                        // 'client' => null // ClientInterface
                        // 'maxChunkSize' => \Spatie\Dropbox\Client::MAX_CHUNK_SIZE,
                        // 'maxUploadChunkRetries' => 0,
                        // 'teamMemberId' => null
                    ],
                    // 'prefix' => '',
                    // 'mimeTypeDetector' => 'service_manager_key', // return a \League\MimeTypeDetection\MimeTypeDetector
                ],
            ],
            'awss3v3_default' => [
                'factory' => BsbFlysystem\Adapter\Factory\AwsS3v3AdapterFactory::class,
                'options' => [
                    'client' => [
                        'credentials' => [
                            'key' => 'your-app-id',
                            'secret' => 'xxxxx',
                        ],
                        'region' => 'eu-west-1',
                        'version' => 'latest', // default: 'latest'
                        // guzzle request options; see http://docs.guzzlephp.org/en/latest/request-options.html#proxy
                        'http' => [
                            // 'timeout' => 10,
                        ],
                        'use_path_style_endpoint' => true, // default: false
                    ],
                    'bucket' => 'xxxxx',
                    // 'prefix' => '',
                    // 'visibility' => \League\Flysystem\Visibility::PUBLIC,
                    // 'mimeTypeDetector' => 'service_manager_key', // return a \League\MimeTypeDetection\MimeTypeDetector
                    // 'options' => [],
                    // 'streamReads' => true,
                    // 'forwardedOptions' => self::AVAILABLE_OPTIONS,
                    // 'metadataFields' => self::EXTRA_METADATA_FIELDS,
                    // 'multipartUploadOptions' => self::MUP_AVAILABLE_OPTIONS,
                    // 'iam' => false,
                ],
            ],
            'replicate_default' => [
                'factory' => BsbFlysystem\Adapter\Factory\ReplicateAdapterFactory::class,
                'options' => [
                    'source' => 'local_default',
                    'replica' => 'zip_default',
                ],
            ],
            'webdav_default' => [
                'factory' => BsbFlysystem\Adapter\Factory\WebDAVAdapterFactory::class,
                'options' => [
                    'client' => [
                        'baseUri' => 'https://example.org/remote.php/webdav/',
                        // 'userName' => '',
                        // 'password' => '',
                        // 'proxy' => '',
                        // 'authType' => '',
                        // 'encoding' => '',
                    ],
                    // 'prefix' => '',
                    // 'visibilityHandling' => WebDAVAdapter::ON_VISIBILITY_THROW_ERROR,
                    // 'manualCopy' => false,
                    // 'manualMove' => false,
                ],
            ],
        ],
        'filesystems' => [
            'default' => [
                'adapter' => 'local_default',
                'adapter_options' => null,
                'options' => [
                    'pathNormalizer' => null, // returns \League\Flysystem\PathNormalizer::class
                    'publicUrlGenerator' => null, // returns \League\Flysystem\UrlGeneration\PublicUrlGenerator::class
                    'temporaryUrlGenerator' => null, // returns \League\Flysystem\UrlGeneration\TemporaryUrlGenerator::class
                ],
            ],
        ],
        'adapter_manager' => [
            'config' => [],
            'lazy_services' => [
                // directory where proxy classes will be written - default to system_get_tmp_dir()
                // 'proxies_target_dir'    => 'data/cache',
                // namespace of the generated proxies, default to "ProxyManagerGeneratedProxy"
                // 'proxies_namespace'     => null,
                // whether the generated proxy classes should be written to disk
                // 'write_proxy_files'     => false,
            ],
        ],
        'filesystem_manager' => [
            'config' => [],
        ],
    ],
];
